
package com.example.accessingdatarest;

import java.util.List;

import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
class MachineController {

  private final MachineRepository repository;

  MachineController(MachineRepository repository) {
    this.repository = repository;
  }


  // Aggregate root
  // tag::get-aggregate-root[]
  @GetMapping("/machines")
  List<Machine> all() {
    return repository.findAll();
  }
  // end::get-aggregate-root[]

  @PostMapping("/machines")
  Machine newMachine(@RequestBody Machine newMachine) {
    return repository.save(newMachine);
  }

  // Single item
  
  @GetMapping("/machines/{id}")
  Machine one(@PathVariable Long id) {
    
    return repository.findById(id);
//      .orElseThrow(() -> new MachineNotFoundException(id));
  }

  @PutMapping("/machines/{id}")
  Machine replaceMachine(@RequestBody Machine newMachine, @PathVariable Long id) {
    
    return repository.findById(id)
      .map(machine -> {
        machine.setIdm(newMachine.getIdm());
        machine.setUid(newMachine.getUid());
        machine.setCreatedBy(newMachine.getCreatedBy());
        machine.setCreatedAt(newMachine.getCreatedAt());
        machine.setActive(newMachine.getActive());
        return repository.save(machine);
      });

//      .orElseGet(() -> {
 //       newMachine.setIdm(id);
  //      return repository.save(newMachine);
 //     });
  }

  @DeleteMapping("/machines/{id}")
  void deleteMachine(@PathVariable Long id) {
    repository.deleteById(id);
  }
}
